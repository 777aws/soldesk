Parameters:
  KeyName:
    Description: Name of an exsting EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameters
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.


Resources:
#VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: MY-VPC

  #서브넷
  MyPublicSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 0, !GetAZs '']
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: My-Public-SN1
  MyPublicSN2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [ 2, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: My-Public-SN2
  
  #인터넷 게이트
  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My-IGW 
  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC

  #RT
  MyPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: My-Public-RT
  
  MyPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref MyPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW

  #서브넷과 라우트 연결
  MyPublic1SNRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSN1
      RouteTableId: !Ref MyPublicRT
  MyPublic2SNRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSN2
      RouteTableId: !Ref MyPublicRT

  #보안 그룹
  WEBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access via port 22
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  #인스턴스
  1EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c76973fbe0ee100c
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: EC2-1
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref 1EC2ENIEth0
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname EC2-1
            yum install httpd -y
            service httpd start
            chkconfig httpd on
            echo "<h1>CloudNet@ EC2-1 Web Server</h1>" > /var/www/html/index.html


  2EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c76973fbe0ee100c
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: EC2-2
      NetworkInterfaces:
        - DeviceIndex: 0
          NetworkInterfaceId: !Ref 2EC2ENIEth0
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostname ELB-EC2-2
            yum install httpd -y
            service httpd start
            chkconfig httpd on
            echo "<h1>CloudNet@ EC2-2 Web Server</h1>" > /var/www/html/index.html

#인터페이스 랜카드 1
  1EC2ENIEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref MyPublicSN1 # 서브넷ID, 보안그룹 변경
      Description: 1EC2 eh0
      GroupSet:
      - !Ref WEBSG
      Tags:
        - Key: Name
          Value: 1EC2 eth0

  VPCEIP1:        # 공인IP 만들기
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  VPCAssociateEIP1:        #EIP 만들기
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt VPCEIP1.AllocationId
      NetworkInterfaceId: !Ref 1EC2ENIEth0

  #인터페이스 랜카드 2
  2EC2ENIEth0:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref MyPublicSN2 # 서브넷ID, 보안그룹 변경
      Description: 2EC2 eh0
      GroupSet:
      - !Ref WEBSG
      Tags:
        - Key: Name
          Value: 2EC2-eth0

  VPCEIP2:        # 공인IP 만들기
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  VPCAssociateEIP2:        #EIP 만들기
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt VPCEIP2.AllocationId
      NetworkInterfaceId: !Ref 2EC2ENIEth0

##################################################
  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: My-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      Targets:
        - Id: !Ref 1EC2
          Port: 80
        - Id: !Ref 2EC2
          Port: 80

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: My-ALB
      Scheme: internet-facing
      Subnets:
        - !Ref MyPublicSN1
        - !Ref MyPublicSN2
      SecurityGroups:
        - !Ref WEBSG

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  PublicDNS:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: 507aws.ga
      HostedZoneConfig:
        Comment: Public hosted zone for 507aws.ga
    
  # ALBAlias:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     Name: www.507aws.ga
  #     Type: A
  #     HostedZoneId: !Ref PublicDNS
  #     AliasTarget:
  #       DNSName: !GetAtt ApplicationLoadBalancer.DNSName
  #       HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
  PrimaryHealthCheck1:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        IPAddresss: !GetAtt 1EC2.PublicIp
        port: 80
        Type: HTTP
        ResourcePath: /index.html
        RequestInterval: 10
      HealthCheckTags:
        - Key: Name
          value: Primary-Check
  
  SecondaryHealthCheck1:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        IPAddresss: !GetAtt 2EC2.PublicIp
        port: 80
        Type: HTTP
        ResourcePath: /index.html
        RequestInterval: 10
      HealthCheckTags:
        - Key: Name
          value: Secondary-Check

  PrimaryRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: test.507aws.ga
      Type: A
      TTL: 30
      HostedZoneId: !Ref PublicDNS
      ResourceRecords:
        - !GetAtt 1EC2.PublicIp
      Failover: PRIMARY
      SetIdentifier: 1
      HealthCheckId: !Ref PrimaryHealthCheck1
  
  SecondaryRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: test.507aws.ga
      Type: A
      TTL: 30
      HostedZoneId: !Ref PublicDNS
      ResourceRecords:
        - !GetAtt 2EC2.PublicIp
      Failover: SECONDARY
      SetIdentifier: 2
      HealthCheckId: !Ref SecondaryHealthCheck1

  